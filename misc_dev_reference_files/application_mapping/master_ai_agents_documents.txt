# Interaction Flowchart: MASTER-AI <-> AGENTS <-> DOCUMENTS

## Overview

The system is designed to provide a dynamic, immersive, and consistent RPG experience. The architecture is based on a central Master AI that communicates with specialized agents. These agents handle specific game elements and interact with associated documents to ensure game consistency.

## Process Flow

1. **User Interaction**:
   - The user provides an input to the system.
   - This input is processed by the Master AI, which decides which agents need to be prompted based on the context.

2. **Master AI**:
   - Receives user input.
   - Determines which agents are needed to respond to the input.
   - Compiles responses from agents to generate a coherent output for the user.

3. **Agents**:
   - Each agent has a specific responsibility and associated documents/folders it interacts with.
   - Agents read from and/or write to their associated documents based on the game's context and requirements.

4. **Document Interaction**:
   - Agents interact with the documents to retrieve or update game data.
   - Documents serve as a "memory" for the game, ensuring consistency in the game's narrative and mechanics.

## Agent Breakdown

### 1. set (Setting)

- **Responsibility**: Handles game ambiance and setting.
- **Interaction**: Reads and updates the `setting` folder, which contains current and past game settings.

### 2. npc (NPCs)

- **Responsibility**: Manages non-player characters in the game.
- **Interaction**: Engages with the `npc` folder to retrieve or introduce new NPCs.

### 3. lor (Lore)

- **Responsibility**: Maintains the game's lore, history, and background.
- **Interaction**: Reads from and writes to the `lore` folder to keep the game's backstory consistent.

### 4. cam (Campaign)

- **Responsibility**: Manages the overarching game campaign and storyline.
- **Interaction**: Interacts with the `campaign` folder to track past, present, and future events.

### 5. tes (Tests/Checks)

- **Responsibility**: Executes tests or checks during gameplay.
- **Interaction**: References the `tests` folder to determine how specific tests or checks are conducted.

### 6. itens (Items)

- **Responsibility**: Manages game items, equipment, and inventory.
- **Interaction**: Accesses the `items` folder to fetch details about available items or introduce new ones.

### 7. music (Music)

- **Responsibility**: Controls the game's musical themes and ambiance.
- **Interaction**: Uses the `music` folder to decide on the current musical theme or introduce new ones.

### 8. opo (Opponents)

- **Responsibility**: Handles enemies and combat situations.
- **Interaction**: Engages with the `opponents` folder to determine potential adversaries in combat situations.

### 9. ali (Allies)

- **Responsibility**: Manages friendly characters and allies.
- **Interaction**: Accesses the `allies` folder for context on potential allies or to introduce new ones.

### 10. ski (Skills)

- **Responsibility**: Manages character skills and abilities.
- **Interaction**: Interacts with the `skills` folder to provide details on available skills or to introduce new abilities.

### 11. ach (Achievements)

- **Responsibility**: Tracks player achievements and milestones.
- **Interaction**: Reads from and writes to the `achievements` folder to update player accomplishments.

### 12. sav (Save & Load)

- **Responsibility**: Manages game save points and checkpoints.
- **Interaction**: Engages with the `save` folder to create or access game save points.

### 13. env (Environment)

- **Responsibility**: Controls game environmental factors like weather.
- **Interaction**: Accesses the `environment` folder to change or retrieve current game weather conditions.

### 14. puz (Puzzles & Challenges)

- **Responsibility**: Introduces and manages game puzzles and challenges.
- **Interaction**: Engages with the `puzzles` folder to present new challenges to the player.

### 15. tra (Trading & Economy)

- **Responsibility**: Manages game trading interactions and economy.
- **Interaction**: Interacts with the `trade` folder to initiate or manage trading scenarios.

### 16. mag (Magic & Spells)

- **Responsibility**: Controls magic and spellcasting in the game.
- **Interaction**: Accesses the `magic` folder to cast spells or retrieve spell details.

## Folder/File Breakdown

### 1. `setting`
   - Contains two types of files:
     1. File with context on the current game setting.
     2. Log of past game settings.

### 2. `npc`
   - Contains two types of files:
     1. File with context on characters and NPCs.
     2. Log of past interactions with NPCs.

### 3. `item`
   - Contains two types of files:
     1. File with context on items and equipment.
     2. Log of past acquired items.

### 4. `achievement`
   - A single file with two sections:
     - Sample achievements.
     - Achievements unlocked by the player.

### 5. `campaign`
   - A single file with three sections:
     - Past: Details of past events.
     - Present: Current ongoing events.
     - Future: Upcoming events.

### 6. `opponent`
   - A single file with two sections:
     - Sample opponents.
     - Opponents encountered by the player.

### 7. `skills`
   - A single file with two sections:
     1. Pre-Defined Skills: These are skills predefined by the game.
     2. Custom Skills: Skills introduced by players or dynamically during gameplay.

### 8. `music`
   - Simple file with all soundtrack options, descriptions, and contexts.

### 9. `lore`
   - Extensive worldview static file with sections like history, cultures, and legends.

### 10. `tests`
   - A series of files, one for each type of test (DEX, STR, INT, etc.), explaining how each test works and its rules.

### 11. `combat`
   - Explanation of how combat works, rules, and strategies.

### 12. `soundtrack`
   - Folder containing MP3 files that serve as the game's soundtrack.

### 13. `prompts`
   - Every Agent runs on GPT-3.5 Turbo. The prompts that guide each agent's behavior are stored here.

### 14. `main-character`
   - A single file with a collection of main character details, attributes, skills, and history.

### 15. `save`
   - Folder containing game save points and checkpoints.

### 16. `environment`
   - Folder with details on the game's current weather and potential environmental changes.

### 17. `puzzles`
   - Folder with challenges and puzzles presented to the player.

### 18. `trade`
   - Folder with details on trading interactions and game economy.

### 19. `magic`
   - Folder containing details on spells, magic systems, and magical interactions.

---

This updated documentation provides a comprehensive understanding of the game's architecture, the roles of agents, and the structure of documents and folders. It reflects the current state of the game's interactions and ensures consistency in naming and structure for future Python-based operations.
